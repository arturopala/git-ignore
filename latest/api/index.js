Index.PACKAGES = {"com" : [], "com.github" : [], "com.github.arturopala" : [], "com.github.arturopala.gitignore" : [{"name" : "com.github.arturopala.gitignore.Debug", "shortDescription" : "", "object" : "com\/github\/arturopala\/gitignore\/Debug$.html", "members_object" : [{"label" : "debug", "tail" : "(l: Int, isSuccess: => Boolean, msg: => String): Unit", "member" : "com.github.arturopala.gitignore.Debug.debug", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#debug(l:Int,isSuccess:=>Boolean,msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(l: Int, msg: => String): Unit", "member" : "com.github.arturopala.gitignore.Debug.debug", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#debug(l:Int,msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: => String): Unit", "member" : "com.github.arturopala.gitignore.Debug.debug", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: => String, color: String): Unit", "member" : "com.github.arturopala.gitignore.Debug.debug", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#debug(msg:=>String,color:String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(isSuccess: => Boolean, msg: => String): Unit", "member" : "com.github.arturopala.gitignore.Debug.debug", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#debug(isSuccess:=>Boolean,msg:=>String):Unit", "kind" : "def"}, {"label" : "indent", "tail" : "(): String", "member" : "com.github.arturopala.gitignore.Debug.indent", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#indent:String", "kind" : "def"}, {"label" : "level", "tail" : ": Int", "member" : "com.github.arturopala.gitignore.Debug.level", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#level:Int", "kind" : "var"}, {"label" : "isDebug", "tail" : ": Boolean", "member" : "com.github.arturopala.gitignore.Debug.isDebug", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#isDebug:Boolean", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/gitignore\/Debug$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.arturopala.gitignore.GitIgnore", "shortDescription" : "Filter paths using .gitignore patterns.", "object" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html", "members_object" : [{"label" : "GlobMatcher", "tail" : "", "member" : "com.github.arturopala.gitignore.GitIgnore.GlobMatcher", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#GlobMatcherextendsGitIgnore.MatcherwithProductwithSerializable", "kind" : "final case class"}, {"label" : "LiteralMatcher", "tail" : "", "member" : "com.github.arturopala.gitignore.GitIgnore.LiteralMatcher", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#LiteralMatcherextendsGitIgnore.MatcherwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Matcher", "tail" : "", "member" : "com.github.arturopala.gitignore.GitIgnore.Matcher", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#Matcher", "kind" : "object"}, {"label" : "Matcher", "tail" : "", "member" : "com.github.arturopala.gitignore.GitIgnore.Matcher", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#MatcherextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Vote", "tail" : "", "member" : "com.github.arturopala.gitignore.GitIgnore.Vote", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#Vote", "kind" : "object"}, {"label" : "Unignore", "tail" : "", "member" : "com.github.arturopala.gitignore.GitIgnore.Unignore", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#UnignoreextendsGitIgnore.VotewithProductwithSerializable", "kind" : "case class"}, {"label" : "Abstain", "tail" : "", "member" : "com.github.arturopala.gitignore.GitIgnore.Abstain", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#Abstain", "kind" : "case object"}, {"label" : "Ignore", "tail" : "", "member" : "com.github.arturopala.gitignore.GitIgnore.Ignore", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#IgnoreextendsGitIgnore.VotewithProductwithSerializable", "kind" : "case class"}, {"label" : "Vote", "tail" : "", "member" : "com.github.arturopala.gitignore.GitIgnore.Vote", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#VoteextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Negate", "tail" : "", "member" : "com.github.arturopala.gitignore.GitIgnore.Negate", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#NegateextendsGitIgnore.PatternwithProductwithSerializable", "kind" : "final case class"}, {"label" : "DirectoryPrefixPattern", "tail" : "", "member" : "com.github.arturopala.gitignore.GitIgnore.DirectoryPrefixPattern", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#DirectoryPrefixPatternextendsGitIgnore.PatternwithProductwithSerializable", "kind" : "final case class"}, {"label" : "AnyPrefixPattern", "tail" : "", "member" : "com.github.arturopala.gitignore.GitIgnore.AnyPrefixPattern", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#AnyPrefixPatternextendsGitIgnore.PatternwithProductwithSerializable", "kind" : "final case class"}, {"label" : "AnyDirectoryPattern", "tail" : "", "member" : "com.github.arturopala.gitignore.GitIgnore.AnyDirectoryPattern", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#AnyDirectoryPatternextendsGitIgnore.PatternwithProductwithSerializable", "kind" : "final case class"}, {"label" : "AnyPathPattern", "tail" : "", "member" : "com.github.arturopala.gitignore.GitIgnore.AnyPathPattern", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#AnyPathPatternextendsGitIgnore.PatternwithProductwithSerializable", "kind" : "final case class"}, {"label" : "AnyNamePattern", "tail" : "", "member" : "com.github.arturopala.gitignore.GitIgnore.AnyNamePattern", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#AnyNamePatternextendsGitIgnore.PatternwithProductwithSerializable", "kind" : "final case class"}, {"label" : "parseGitPattern", "tail" : "(p: String): Pattern", "member" : "com.github.arturopala.gitignore.GitIgnore.parseGitPattern", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#parseGitPattern(p:String):com.github.arturopala.gitignore.GitIgnore.Pattern", "kind" : "final def"}, {"label" : "Pattern", "tail" : "", "member" : "com.github.arturopala.gitignore.GitIgnore.Pattern", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#PatternextendsAnyRef", "kind" : "sealed trait"}, {"label" : "apply", "tail" : "(gitPattern: String): GitIgnore", "member" : "com.github.arturopala.gitignore.GitIgnore.apply", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#apply(gitPattern:String):com.github.arturopala.gitignore.GitIgnore", "kind" : "final def"}, {"label" : "parseGitIgnore", "tail" : "(gitIgnore: String): List[String]", "member" : "com.github.arturopala.gitignore.GitIgnore.parseGitIgnore", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#parseGitIgnore(gitIgnore:String):List[String]", "kind" : "final def"}, {"label" : "parse", "tail" : "(gitIgnore: String): GitIgnore", "member" : "com.github.arturopala.gitignore.GitIgnore.parse", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#parse(gitIgnore:String):com.github.arturopala.gitignore.GitIgnore", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "isAllowed", "tail" : "(path: String): Boolean", "member" : "com.github.arturopala.gitignore.GitIgnore.isAllowed", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#isAllowed(path:String):Boolean", "kind" : "final def"}, {"label" : "isIgnored", "tail" : "(path: String): Boolean", "member" : "com.github.arturopala.gitignore.GitIgnore.isIgnored", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#isIgnored(path:String):Boolean", "kind" : "final def"}, {"label" : "isAllowed", "tail" : "(path: Iterable[String], isDirectory: Boolean): Boolean", "member" : "com.github.arturopala.gitignore.GitIgnore.isAllowed", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#isAllowed(path:Iterable[String],isDirectory:Boolean):Boolean", "kind" : "final def"}, {"label" : "isIgnored", "tail" : "(path: Iterable[String], isDirectory: Boolean): Boolean", "member" : "com.github.arturopala.gitignore.GitIgnore.isIgnored", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#isIgnored(path:Iterable[String],isDirectory:Boolean):Boolean", "kind" : "final def"}, {"label" : "isAllowed", "tail" : "(path: Path, isDirectory: Boolean): Boolean", "member" : "com.github.arturopala.gitignore.GitIgnore.isAllowed", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#isAllowed(path:java.nio.file.Path,isDirectory:Boolean):Boolean", "kind" : "final def"}, {"label" : "isIgnored", "tail" : "(path: Path, isDirectory: Boolean): Boolean", "member" : "com.github.arturopala.gitignore.GitIgnore.isIgnored", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#isIgnored(path:java.nio.file.Path,isDirectory:Boolean):Boolean", "kind" : "final def"}, {"label" : "isAllowed", "tail" : "(path: Path): Boolean", "member" : "com.github.arturopala.gitignore.GitIgnore.isAllowed", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#isAllowed(path:java.nio.file.Path):Boolean", "kind" : "final def"}, {"label" : "isIgnored", "tail" : "(path: Path): Boolean", "member" : "com.github.arturopala.gitignore.GitIgnore.isIgnored", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#isIgnored(path:java.nio.file.Path):Boolean", "kind" : "final def"}, {"label" : "patterns", "tail" : ": Seq[Pattern]", "member" : "com.github.arturopala.gitignore.GitIgnore.patterns", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#patterns:Seq[com.github.arturopala.gitignore.GitIgnore.Pattern]", "kind" : "lazy val"}, {"member" : "com.github.arturopala.gitignore.GitIgnore#<init>", "error" : "unsupported entity"}, {"label" : "gitPatterns", "tail" : ": Seq[String]", "member" : "com.github.arturopala.gitignore.GitIgnore.gitPatterns", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#gitPatterns:Seq[String]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/gitignore\/GitIgnore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/arturopala\/gitignore\/GitIgnore.html", "kind" : "case class"}, {"name" : "com.github.arturopala.gitignore.Glob", "shortDescription" : "Globbing pathnames.", "object" : "com\/github\/arturopala\/gitignore\/Glob$.html", "members_object" : [{"label" : "Matcher", "tail" : "", "member" : "com.github.arturopala.gitignore.Glob.Matcher", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#Matcher", "kind" : "object"}, {"label" : "Matcher", "tail" : "", "member" : "com.github.arturopala.gitignore.Glob.Matcher", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#MatcherextendsAnyRef", "kind" : "sealed trait"}, {"label" : "CharacterRangeCheck", "tail" : "", "member" : "com.github.arturopala.gitignore.Glob.CharacterRangeCheck", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#CharacterRangeCheckextendsGlob.CharacterCheckwithProductwithSerializable", "kind" : "final case class"}, {"label" : "CharacterClassCheck", "tail" : "", "member" : "com.github.arturopala.gitignore.Glob.CharacterClassCheck", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#CharacterClassCheckextendsGlob.CharacterCheckwithProductwithSerializable", "kind" : "final case class"}, {"label" : "NegatedCompositeCharacterCheck", "tail" : "", "member" : "com.github.arturopala.gitignore.Glob.NegatedCompositeCharacterCheck", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#NegatedCompositeCharacterCheckextendsGlob.CharacterCheckwithProductwithSerializable", "kind" : "final case class"}, {"label" : "CompositeCharacterCheck", "tail" : "", "member" : "com.github.arturopala.gitignore.Glob.CompositeCharacterCheck", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#CompositeCharacterCheckextendsGlob.CharacterCheckwithProductwithSerializable", "kind" : "final case class"}, {"label" : "CharacterCheck", "tail" : "", "member" : "com.github.arturopala.gitignore.Glob.CharacterCheck", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#CharacterCheck", "kind" : "object"}, {"label" : "BracketPattern", "tail" : "", "member" : "com.github.arturopala.gitignore.Glob.BracketPattern", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#BracketPatternextendsGlob.PatternwithGlob.SingleCharacterPatternwithProductwithSerializable", "kind" : "final case class"}, {"label" : "AnySingleCharacterPattern", "tail" : "", "member" : "com.github.arturopala.gitignore.Glob.AnySingleCharacterPattern", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#AnySingleCharacterPattern", "kind" : "object"}, {"label" : "AnythingPattern", "tail" : "", "member" : "com.github.arturopala.gitignore.Glob.AnythingPattern", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#AnythingPattern", "kind" : "case object"}, {"label" : "AnyStringPattern", "tail" : "", "member" : "com.github.arturopala.gitignore.Glob.AnyStringPattern", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#AnyStringPattern", "kind" : "case object"}, {"label" : "LiteralPattern", "tail" : "", "member" : "com.github.arturopala.gitignore.Glob.LiteralPattern", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#LiteralPatternextendsGlob.PatternwithProductwithSerializable", "kind" : "final case class"}, {"label" : "CompositePattern", "tail" : "", "member" : "com.github.arturopala.gitignore.Glob.CompositePattern", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#CompositePatternextendsGlob.PatternwithProductwithSerializable", "kind" : "final case class"}, {"label" : "SingleCharacterPattern", "tail" : "", "member" : "com.github.arturopala.gitignore.Glob.SingleCharacterPattern", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#SingleCharacterPatternextendsGlob.PatternwithGlob.WildcardPattern", "kind" : "sealed trait"}, {"label" : "WildcardPattern", "tail" : "", "member" : "com.github.arturopala.gitignore.Glob.WildcardPattern", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#WildcardPatternextendsGlob.Pattern", "kind" : "sealed trait"}, {"label" : "CharacterCheck", "tail" : "", "member" : "com.github.arturopala.gitignore.Glob.CharacterCheck", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#CharacterCheckextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Pattern", "tail" : "", "member" : "com.github.arturopala.gitignore.Glob.Pattern", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#PatternextendsAnyRef", "kind" : "sealed trait"}, {"label" : "compile", "tail" : "(pattern: String): Pattern", "member" : "com.github.arturopala.gitignore.Glob.compile", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#compile(pattern:String):com.github.arturopala.gitignore.Glob.Pattern", "kind" : "final def"}, {"label" : "isWildcardPattern", "tail" : "(pattern: String): Boolean", "member" : "com.github.arturopala.gitignore.Glob.isWildcardPattern", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#isWildcardPattern(pattern:String):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/gitignore\/Glob$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.arturopala.gitignore.Zoom", "shortDescription" : "A Mutable wrapper of the stringhelping to track lookup operations results.", "object" : "com\/github\/arturopala\/gitignore\/Zoom$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "com.github.arturopala.gitignore.Zoom.toString", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#toString():String", "kind" : "def"}, {"label" : "prettyPrint", "tail" : "(): String", "member" : "com.github.arturopala.gitignore.Zoom.prettyPrint", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#prettyPrint:String", "kind" : "final def"}, {"label" : "copy", "tail" : "(): Zoom", "member" : "com.github.arturopala.gitignore.Zoom.copy", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#copy:com.github.arturopala.gitignore.Zoom", "kind" : "def"}, {"label" : "copyFrameAndResetContour", "tail" : "(): Zoom", "member" : "com.github.arturopala.gitignore.Zoom.copyFrameAndResetContour", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#copyFrameAndResetContour:com.github.arturopala.gitignore.Zoom", "kind" : "def"}, {"label" : "squeezeRightOrLeft", "tail" : "(offset: Int, minWidth: Int, maxTo: Int): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.squeezeRightOrLeft", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#squeezeRightOrLeft(offset:Int,minWidth:Int,maxTo:Int):Boolean", "kind" : "def"}, {"label" : "closeUpFrameAndResetContour", "tail" : "(): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.closeUpFrameAndResetContour", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#closeUpFrameAndResetContour:Boolean", "kind" : "def"}, {"label" : "unionContour", "tail" : "(other: Zoom): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.unionContour", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#unionContour(other:com.github.arturopala.gitignore.Zoom):Boolean", "kind" : "def"}, {"label" : "intersectContour", "tail" : "(other: Zoom): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.intersectContour", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#intersectContour(other:com.github.arturopala.gitignore.Zoom):Boolean", "kind" : "def"}, {"label" : "merge", "tail" : "(other: Zoom): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.merge", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#merge(other:com.github.arturopala.gitignore.Zoom):Boolean", "kind" : "def"}, {"label" : "noGapBetweenContours", "tail" : "(other: Zoom): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.noGapBetweenContours", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#noGapBetweenContours(other:com.github.arturopala.gitignore.Zoom):Boolean", "kind" : "def"}, {"label" : "flipFrame", "tail" : "(other: Zoom, leftSide: Boolean): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.flipFrame", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#flipFrame(other:com.github.arturopala.gitignore.Zoom,leftSide:Boolean):Boolean", "kind" : "def"}, {"label" : "noOverlapBetweenContours", "tail" : "(other: Zoom): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.noOverlapBetweenContours", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#noOverlapBetweenContours(other:com.github.arturopala.gitignore.Zoom):Boolean", "kind" : "def"}, {"label" : "resizeFrame", "tail" : "(distance: Int, leftSide: Boolean): Unit", "member" : "com.github.arturopala.gitignore.Zoom.resizeFrame", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#resizeFrame(distance:Int,leftSide:Boolean):Unit", "kind" : "def"}, {"label" : "takeAll", "tail" : "(): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.takeAll", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#takeAll():Boolean", "kind" : "def"}, {"label" : "takeAllFromRight", "tail" : "(): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.takeAllFromRight", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#takeAllFromRight():Boolean", "kind" : "def"}, {"label" : "takeAllFromLeft", "tail" : "(): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.takeAllFromLeft", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#takeAllFromLeft():Boolean", "kind" : "def"}, {"label" : "lookupWhileNot", "tail" : "(check: (Char) => Boolean, minSteps: Int, maxSteps: Int): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.lookupWhileNot", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#lookupWhileNot(check:Char=>Boolean,minSteps:Int,maxSteps:Int):Boolean", "kind" : "def"}, {"label" : "lookupLeftUntil", "tail" : "(check: (Char) => Boolean, minSteps: Int, maxSteps: Int): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.lookupLeftUntil", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#lookupLeftUntil(check:Char=>Boolean,minSteps:Int,maxSteps:Int):Boolean", "kind" : "def"}, {"label" : "lookupRightUntil", "tail" : "(check: (Char) => Boolean, minSteps: Int, maxSteps: Int): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.lookupRightUntil", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#lookupRightUntil(check:Char=>Boolean,minSteps:Int,maxSteps:Int):Boolean", "kind" : "def"}, {"label" : "lookupWhile", "tail" : "(check: (Char) => Boolean, maxSteps: Int): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.lookupWhile", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#lookupWhile(check:Char=>Boolean,maxSteps:Int):Boolean", "kind" : "def"}, {"label" : "lookupLeftWhile", "tail" : "(check: (Char) => Boolean, maxSteps: Int): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.lookupLeftWhile", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#lookupLeftWhile(check:Char=>Boolean,maxSteps:Int):Boolean", "kind" : "def"}, {"label" : "lookupRightWhile", "tail" : "(check: (Char) => Boolean, maxSteps: Int): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.lookupRightWhile", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#lookupRightWhile(check:Char=>Boolean,maxSteps:Int):Boolean", "kind" : "def"}, {"label" : "lookupFor", "tail" : "(string: String): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.lookupFor", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#lookupFor(string:String):Boolean", "kind" : "def"}, {"label" : "lookupLeftFor", "tail" : "(string: String, maxDistance: Int): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.lookupLeftFor", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#lookupLeftFor(string:String,maxDistance:Int):Boolean", "kind" : "def"}, {"label" : "lookupRightFor", "tail" : "(string: String, maxDistance: Int): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.lookupRightFor", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#lookupRightFor(string:String,maxDistance:Int):Boolean", "kind" : "def"}, {"label" : "resetContour", "tail" : "(): Zoom", "member" : "com.github.arturopala.gitignore.Zoom.resetContour", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#resetContour:com.github.arturopala.gitignore.Zoom", "kind" : "def"}, {"label" : "setFrame", "tail" : "(from: Int, to: Int): Zoom", "member" : "com.github.arturopala.gitignore.Zoom.setFrame", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#setFrame(from:Int,to:Int):com.github.arturopala.gitignore.Zoom", "kind" : "def"}, {"label" : "maxElseBottom", "tail" : "(): Int", "member" : "com.github.arturopala.gitignore.Zoom.maxElseBottom", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#maxElseBottom:Int", "kind" : "def"}, {"label" : "minElseTop", "tail" : "(): Int", "member" : "com.github.arturopala.gitignore.Zoom.minElseTop", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#minElseTop:Int", "kind" : "def"}, {"label" : "maxElseTop", "tail" : "(): Int", "member" : "com.github.arturopala.gitignore.Zoom.maxElseTop", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#maxElseTop:Int", "kind" : "def"}, {"label" : "minElseBottom", "tail" : "(): Int", "member" : "com.github.arturopala.gitignore.Zoom.minElseBottom", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#minElseBottom:Int", "kind" : "def"}, {"label" : "contourLength", "tail" : "(): Int", "member" : "com.github.arturopala.gitignore.Zoom.contourLength", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#contourLength:Int", "kind" : "def"}, {"label" : "hasContour", "tail" : "(): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.hasContour", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#hasContour:Boolean", "kind" : "def"}, {"label" : "contour", "tail" : "(): (Int, Int)", "member" : "com.github.arturopala.gitignore.Zoom.contour", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#contour:(Int,Int)", "kind" : "def"}, {"label" : "frameWidth", "tail" : "(): Int", "member" : "com.github.arturopala.gitignore.Zoom.frameWidth", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#frameWidth:Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.nonEmpty", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "com.github.arturopala.gitignore.Zoom.isEmpty", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "right", "tail" : "(): Int", "member" : "com.github.arturopala.gitignore.Zoom.right", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#right:Int", "kind" : "def"}, {"label" : "left", "tail" : "(): Int", "member" : "com.github.arturopala.gitignore.Zoom.left", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#left:Int", "kind" : "def"}, {"label" : "frame", "tail" : "(): (Int, Int)", "member" : "com.github.arturopala.gitignore.Zoom.frame", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#frame:(Int,Int)", "kind" : "def"}, {"label" : "end", "tail" : "(): Int", "member" : "com.github.arturopala.gitignore.Zoom.end", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#end():Int", "kind" : "def"}, {"label" : "start", "tail" : "(): Int", "member" : "com.github.arturopala.gitignore.Zoom.start", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#start():Int", "kind" : "def"}, {"member" : "com.github.arturopala.gitignore.Zoom#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/gitignore\/Zoom.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(value: String, from: Int, to: Int, min: Int, max: Int): Zoom", "member" : "com.github.arturopala.gitignore.Zoom.apply", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#apply(value:String,from:Int,to:Int,min:Int,max:Int):com.github.arturopala.gitignore.Zoom", "kind" : "def"}, {"label" : "apply", "tail" : "(value: String, from: Int, to: Int): Zoom", "member" : "com.github.arturopala.gitignore.Zoom.apply", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#apply(value:String,from:Int,to:Int):com.github.arturopala.gitignore.Zoom", "kind" : "def"}, {"label" : "apply", "tail" : "(value: String, from: Int): Zoom", "member" : "com.github.arturopala.gitignore.Zoom.apply", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#apply(value:String,from:Int):com.github.arturopala.gitignore.Zoom", "kind" : "def"}, {"label" : "apply", "tail" : "(value: String): Zoom", "member" : "com.github.arturopala.gitignore.Zoom.apply", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#apply(value:String):com.github.arturopala.gitignore.Zoom", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/gitignore\/Zoom$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/arturopala\/gitignore\/Zoom.html", "kind" : "class"}]};